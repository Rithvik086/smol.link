
import { PrismaClient } from '../../generated/prisma'
import { unique_random } from '../utils/unique'
import { Request, Response } from 'express'

const prisma = new PrismaClient()

export async function shotner(req: Request, res: Response) {

    try {
        const { ogLink } = req.body

        if (!ogLink) {
            return res.status(400).json({ error: "No link given" })
        }

        try {
            new URL(ogLink)
        } catch (err) {
            return res.status(400).json({ error: "Invalid URL Please dont try to break code" })
        }

        const store = await prisma.linkmap.create({
            data: {
                ogLink: ogLink,
                newLink: 'JUST_WAIT'
                //can cause race conditions issues
            },


        })

        const short_url = unique_random(store.id, 6, 8)

        await prisma.linkmap.update({
            where: { id: store.id },
            data: { newLink: short_url }
        })

        return res.status(201).json({
            original: ogLink,
            short: `https://${process.env.HOST_DOMAIN}/${short_url}`
        })

    } catch (err) {
        console.error(err)
        res.status(500).json({ error: "failed ot shorten" })
    }


}

export async function redirect(req: Request, res: Response) {
    const { short } = req.params

    try {
        const findOg = await prisma.linkmap.findUnique({
            where: { newLink: short }
        })
        if (!findOg) {
            return res.status(404).send('URL not generated by this service')
        }

        return res.redirect(302, findOg.ogLink)

    } catch (err) {
        console.error(err)
        return res.status(500).send('Server error')
    }


}